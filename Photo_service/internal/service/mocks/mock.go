// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/niktin06sash/MicroserviceProject/Photo_service/internal/model"
	repository "github.com/niktin06sash/MicroserviceProject/Photo_service/internal/repository"
	proto "github.com/niktin06sash/MicroserviceProject/Photo_service/proto"
)

// MockDBPhotoRepos is a mock of DBPhotoRepos interface.
type MockDBPhotoRepos struct {
	ctrl     *gomock.Controller
	recorder *MockDBPhotoReposMockRecorder
}

// MockDBPhotoReposMockRecorder is the mock recorder for MockDBPhotoRepos.
type MockDBPhotoReposMockRecorder struct {
	mock *MockDBPhotoRepos
}

// NewMockDBPhotoRepos creates a new mock instance.
func NewMockDBPhotoRepos(ctrl *gomock.Controller) *MockDBPhotoRepos {
	mock := &MockDBPhotoRepos{ctrl: ctrl}
	mock.recorder = &MockDBPhotoReposMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBPhotoRepos) EXPECT() *MockDBPhotoReposMockRecorder {
	return m.recorder
}

// AddUserId mocks base method.
func (m *MockDBPhotoRepos) AddUserId(ctx context.Context, userid string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserId", ctx, userid)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// AddUserId indicates an expected call of AddUserId.
func (mr *MockDBPhotoReposMockRecorder) AddUserId(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserId", reflect.TypeOf((*MockDBPhotoRepos)(nil).AddUserId), ctx, userid)
}

// DeletePhoto mocks base method.
func (m *MockDBPhotoRepos) DeletePhoto(ctx context.Context, userid, photoid string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhoto", ctx, userid, photoid)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// DeletePhoto indicates an expected call of DeletePhoto.
func (mr *MockDBPhotoReposMockRecorder) DeletePhoto(ctx, userid, photoid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhoto", reflect.TypeOf((*MockDBPhotoRepos)(nil).DeletePhoto), ctx, userid, photoid)
}

// DeleteUserData mocks base method.
func (m *MockDBPhotoRepos) DeleteUserData(ctx context.Context, userid string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserData", ctx, userid)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// DeleteUserData indicates an expected call of DeleteUserData.
func (mr *MockDBPhotoReposMockRecorder) DeleteUserData(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserData", reflect.TypeOf((*MockDBPhotoRepos)(nil).DeleteUserData), ctx, userid)
}

// GetPhoto mocks base method.
func (m *MockDBPhotoRepos) GetPhoto(ctx context.Context, userid, photoid string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoto", ctx, userid, photoid)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// GetPhoto indicates an expected call of GetPhoto.
func (mr *MockDBPhotoReposMockRecorder) GetPhoto(ctx, userid, photoid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoto", reflect.TypeOf((*MockDBPhotoRepos)(nil).GetPhoto), ctx, userid, photoid)
}

// GetPhotos mocks base method.
func (m *MockDBPhotoRepos) GetPhotos(ctx context.Context, userid string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotos", ctx, userid)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// GetPhotos indicates an expected call of GetPhotos.
func (mr *MockDBPhotoReposMockRecorder) GetPhotos(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotos", reflect.TypeOf((*MockDBPhotoRepos)(nil).GetPhotos), ctx, userid)
}

// LoadPhoto mocks base method.
func (m *MockDBPhotoRepos) LoadPhoto(ctx context.Context, photo *model.Photo) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPhoto", ctx, photo)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// LoadPhoto indicates an expected call of LoadPhoto.
func (mr *MockDBPhotoReposMockRecorder) LoadPhoto(ctx, photo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPhoto", reflect.TypeOf((*MockDBPhotoRepos)(nil).LoadPhoto), ctx, photo)
}

// MockCachePhotoRepos is a mock of CachePhotoRepos interface.
type MockCachePhotoRepos struct {
	ctrl     *gomock.Controller
	recorder *MockCachePhotoReposMockRecorder
}

// MockCachePhotoReposMockRecorder is the mock recorder for MockCachePhotoRepos.
type MockCachePhotoReposMockRecorder struct {
	mock *MockCachePhotoRepos
}

// NewMockCachePhotoRepos creates a new mock instance.
func NewMockCachePhotoRepos(ctrl *gomock.Controller) *MockCachePhotoRepos {
	mock := &MockCachePhotoRepos{ctrl: ctrl}
	mock.recorder = &MockCachePhotoReposMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachePhotoRepos) EXPECT() *MockCachePhotoReposMockRecorder {
	return m.recorder
}

// AddPhotoCache mocks base method.
func (m *MockCachePhotoRepos) AddPhotoCache(ctx context.Context, userid string, photo *proto.Photo) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPhotoCache", ctx, userid, photo)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// AddPhotoCache indicates an expected call of AddPhotoCache.
func (mr *MockCachePhotoReposMockRecorder) AddPhotoCache(ctx, userid, photo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPhotoCache", reflect.TypeOf((*MockCachePhotoRepos)(nil).AddPhotoCache), ctx, userid, photo)
}

// AddPhotosCache mocks base method.
func (m *MockCachePhotoRepos) AddPhotosCache(ctx context.Context, userid string, photosslice []*proto.Photo) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPhotosCache", ctx, userid, photosslice)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// AddPhotosCache indicates an expected call of AddPhotosCache.
func (mr *MockCachePhotoReposMockRecorder) AddPhotosCache(ctx, userid, photosslice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPhotosCache", reflect.TypeOf((*MockCachePhotoRepos)(nil).AddPhotosCache), ctx, userid, photosslice)
}

// DeletePhotoCache mocks base method.
func (m *MockCachePhotoRepos) DeletePhotoCache(ctx context.Context, userid, photoid string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhotoCache", ctx, userid, photoid)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// DeletePhotoCache indicates an expected call of DeletePhotoCache.
func (mr *MockCachePhotoReposMockRecorder) DeletePhotoCache(ctx, userid, photoid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhotoCache", reflect.TypeOf((*MockCachePhotoRepos)(nil).DeletePhotoCache), ctx, userid, photoid)
}

// DeletePhotosCache mocks base method.
func (m *MockCachePhotoRepos) DeletePhotosCache(ctx context.Context, userid string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhotosCache", ctx, userid)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// DeletePhotosCache indicates an expected call of DeletePhotosCache.
func (mr *MockCachePhotoReposMockRecorder) DeletePhotosCache(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhotosCache", reflect.TypeOf((*MockCachePhotoRepos)(nil).DeletePhotosCache), ctx, userid)
}

// GetPhotoCache mocks base method.
func (m *MockCachePhotoRepos) GetPhotoCache(ctx context.Context, userid, photoid string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoCache", ctx, userid, photoid)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// GetPhotoCache indicates an expected call of GetPhotoCache.
func (mr *MockCachePhotoReposMockRecorder) GetPhotoCache(ctx, userid, photoid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoCache", reflect.TypeOf((*MockCachePhotoRepos)(nil).GetPhotoCache), ctx, userid, photoid)
}

// GetPhotosCache mocks base method.
func (m *MockCachePhotoRepos) GetPhotosCache(ctx context.Context, userid string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotosCache", ctx, userid)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// GetPhotosCache indicates an expected call of GetPhotosCache.
func (mr *MockCachePhotoReposMockRecorder) GetPhotosCache(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotosCache", reflect.TypeOf((*MockCachePhotoRepos)(nil).GetPhotosCache), ctx, userid)
}

// MockCloudPhotoStorage is a mock of CloudPhotoStorage interface.
type MockCloudPhotoStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCloudPhotoStorageMockRecorder
}

// MockCloudPhotoStorageMockRecorder is the mock recorder for MockCloudPhotoStorage.
type MockCloudPhotoStorageMockRecorder struct {
	mock *MockCloudPhotoStorage
}

// NewMockCloudPhotoStorage creates a new mock instance.
func NewMockCloudPhotoStorage(ctrl *gomock.Controller) *MockCloudPhotoStorage {
	mock := &MockCloudPhotoStorage{ctrl: ctrl}
	mock.recorder = &MockCloudPhotoStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudPhotoStorage) EXPECT() *MockCloudPhotoStorageMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockCloudPhotoStorage) DeleteFile(ctx context.Context, id, contenttype string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, id, contenttype)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockCloudPhotoStorageMockRecorder) DeleteFile(ctx, id, contenttype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockCloudPhotoStorage)(nil).DeleteFile), ctx, id, contenttype)
}

// UploadFile mocks base method.
func (m *MockCloudPhotoStorage) UploadFile(ctx context.Context, localfilepath, photoid, ext string) *repository.RepositoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, localfilepath, photoid, ext)
	ret0, _ := ret[0].(*repository.RepositoryResponse)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockCloudPhotoStorageMockRecorder) UploadFile(ctx, localfilepath, photoid, ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockCloudPhotoStorage)(nil).UploadFile), ctx, localfilepath, photoid, ext)
}

// MockLogProducer is a mock of LogProducer interface.
type MockLogProducer struct {
	ctrl     *gomock.Controller
	recorder *MockLogProducerMockRecorder
}

// MockLogProducerMockRecorder is the mock recorder for MockLogProducer.
type MockLogProducerMockRecorder struct {
	mock *MockLogProducer
}

// NewMockLogProducer creates a new mock instance.
func NewMockLogProducer(ctrl *gomock.Controller) *MockLogProducer {
	mock := &MockLogProducer{ctrl: ctrl}
	mock.recorder = &MockLogProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogProducer) EXPECT() *MockLogProducerMockRecorder {
	return m.recorder
}

// NewPhotoLog mocks base method.
func (m *MockLogProducer) NewPhotoLog(level, place, traceid, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewPhotoLog", level, place, traceid, msg)
}

// NewPhotoLog indicates an expected call of NewPhotoLog.
func (mr *MockLogProducerMockRecorder) NewPhotoLog(level, place, traceid, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPhotoLog", reflect.TypeOf((*MockLogProducer)(nil).NewPhotoLog), level, place, traceid, msg)
}
