// Code generated by MockGen. DO NOT EDIT.
// Source: grpc_client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/niktin06sash/MicroserviceProject/SessionManagement_service/proto"
)

// MockGrpcClientService is a mock of GrpcClientService interface.
type MockGrpcClientService struct {
	ctrl     *gomock.Controller
	recorder *MockGrpcClientServiceMockRecorder
}

// MockGrpcClientServiceMockRecorder is the mock recorder for MockGrpcClientService.
type MockGrpcClientServiceMockRecorder struct {
	mock *MockGrpcClientService
}

// NewMockGrpcClientService creates a new mock instance.
func NewMockGrpcClientService(ctrl *gomock.Controller) *MockGrpcClientService {
	mock := &MockGrpcClientService{ctrl: ctrl}
	mock.recorder = &MockGrpcClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrpcClientService) EXPECT() *MockGrpcClientServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGrpcClientService) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockGrpcClientServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGrpcClientService)(nil).Close))
}

// CreateSession mocks base method.
func (m *MockGrpcClientService) CreateSession(ctx context.Context, userID string) (*proto.CreateSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, userID)
	ret0, _ := ret[0].(*proto.CreateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockGrpcClientServiceMockRecorder) CreateSession(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockGrpcClientService)(nil).CreateSession), ctx, userID)
}

// DeleteSession mocks base method.
func (m *MockGrpcClientService) DeleteSession(ctx context.Context, sessionID string) (*proto.DeleteSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, sessionID)
	ret0, _ := ret[0].(*proto.DeleteSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockGrpcClientServiceMockRecorder) DeleteSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockGrpcClientService)(nil).DeleteSession), ctx, sessionID)
}
