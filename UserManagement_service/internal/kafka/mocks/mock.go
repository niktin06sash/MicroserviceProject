// Code generated by MockGen. DO NOT EDIT.
// Source: kafka.go

// Package mock_kafka is a generated GoMock package.
package mock_kafka

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKafkaProducerService is a mock of KafkaProducerService interface.
type MockKafkaProducerService struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaProducerServiceMockRecorder
}

// MockKafkaProducerServiceMockRecorder is the mock recorder for MockKafkaProducerService.
type MockKafkaProducerServiceMockRecorder struct {
	mock *MockKafkaProducerService
}

// NewMockKafkaProducerService creates a new mock instance.
func NewMockKafkaProducerService(ctrl *gomock.Controller) *MockKafkaProducerService {
	mock := &MockKafkaProducerService{ctrl: ctrl}
	mock.recorder = &MockKafkaProducerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaProducerService) EXPECT() *MockKafkaProducerServiceMockRecorder {
	return m.recorder
}

// NewUserLog mocks base method.
func (m *MockKafkaProducerService) NewUserLog(level, place, traceid, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewUserLog", level, place, traceid, msg)
}

// NewUserLog indicates an expected call of NewUserLog.
func (mr *MockKafkaProducerServiceMockRecorder) NewUserLog(level, place, traceid, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserLog", reflect.TypeOf((*MockKafkaProducerService)(nil).NewUserLog), level, place, traceid, msg)
}
