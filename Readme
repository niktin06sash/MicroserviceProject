/////////////////////////////////////////////////////////////////////////
1. API-Service
Обрабатывает входящие запросы, выполняет маршрутизацию и базовую авторизацию.
Основные функции:
    • Middleware:
        ◦ Logging (traceID, таймауты)
        ◦ Rate-Limiter
        ◦ Authorization через grpc-запросы в SessionManagement
    • Проксирование: /reg, /auth, /logout, /delete, /me/update, /me, /users/id/{id} → UserManagement
    • gRPC-запросы в Photo-Service
    • Документация Swagger
    • Отправка логов в Logs-Service в формате JSON
    • Отправка метрик в Prometheus
Технологии: Gin, gRPC, Swagger, Kafka-Producer, Prometheus
/////////////////////////////////////////////////////////////////////////
2. UserManagement
Управляет профилями пользователей.
Эндпоинты:
    • POST /reg
    • POST /auth
    • DELETE /logout
    • DELETE /delete
    • PATCH /me/update
    • GET /me
    • GET /users/id/{id}
Бизнес-логика:
    • RegistrateAndLogin
    • AuthenticateAndLogin
    • Logout
    • DeleteAccount
    • UpdateAccount
    • GetMyProfile
    • GetProfileById
• Использование миграций баз данных
• Отправка метрик в Prometheus
• Отправка событий в Photo-Service
• Кэширование профилей пользователей
• Отправка логов в Logs-Service в формате JSON
Технологии: net/http, PostgreSQL, gRPC, bcrypt, Kafka-Producer, Prometheus, Redis
/////////////////////////////////////////////////////////////////////////
3. SessionManagement
Управляет сессиями пользователей.
gRPC методы:
    • CreateSession
    • ValidateSession
    • DeleteSession
Хранение: Redis с TTL
• Отправка логов в Logs-Service в формате JSON
Технологии: gRPC, Redis, Kafka-Producer
/////////////////////////////////////////////////////////////////////////
4. Logs-Service
Отвечает за единый файловый сбор логов со всех сервисов.
Технологии: Kafka-Consumer, Zap-Logger, os
/////////////////////////////////////////////////////////////////////////
5. Photo-Service
Отвечает за загрузку/получение фотографий пользователей.
gRPC методы:
    • LoadPhoto
    • DeletePhoto
    • GetPhoto
    • GetPhotos
• Хранение id пользователей и метаданных фотографий в PostgreSQL(каскадное удаление фотографий пользователя)
• Загрузка и удаление фотографий в хранилище Mega.nz
• Получение событий от UserManagement
• Отправка логов в Logs-Service в формате JSON
Технологии: gRPC, PostgreSQL, Rabbit-Consumer, Mega.nz
/////////////////////////////////////////////////////////////////////////
Общие характеристики:
    • Конфигурация: config.yml (Viper)
    • Логирование: стандартная библиотека/Zap
    • Модульность: разделение на пакеты
    • Обработка ошибок и разделение их на клиентские и серверные
    • Реализован DockerFile для каждого сервиса
Особенности реализации:
    • Retry-логика для внешних вызовов
    • Timeout handling
    • Graceful shutdown во всех сервисах