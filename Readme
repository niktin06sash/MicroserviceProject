/////////////////////////////////////////////////////////////////////////
Client --> API-Service
API-Service --> SessionManagement; API-Service --> UserManagement  
UserManagement --> SessionManagement
SessionManagement --> API-Service
API-Service -->  Client
/////////////////////////////////////////////////////////////////////////
1. API-Service
Обрабатывает входящие запросы, выполняет маршрутизацию и базовую авторизацию.
Основные функции:
    • Middleware:
        ◦ Logging (traceID, таймауты)
        ◦ Rate-Limiter
        ◦ Authorization через SessionManagement
    • Проксирование: /reg, /auth, /logout, /delete → UserManagement
    • Отправка логов в единый сервис логирования в формате JSON
    • Отправка метрик в Prometheus
Технологии: Gin, gRPC, Swagger, Kafka-Producer, Prometheus
/////////////////////////////////////////////////////////////////////////
2. UserManagement
Управляет пользователями (регистрация/аутентификация/удаление).
Эндпоинты:
    • POST /reg
    • POST /auth
    • DELETE /logout
    • DELETE /delete
Бизнес-логика:
    • RegistrateAndLogin
    • AuthenticateAndLogin
    • Logout
    • DeleteAccount
• Отправка логов в единый сервис логирования в формате JSON
• Отправка метрик в Prometheus
Технологии: REST API, PostgreSQL, gRPC, bcrypt, Kafka-Producer, Prometheus
/////////////////////////////////////////////////////////////////////////
3. SessionManagement
Управляет сессиями пользователей.
gRPC методы:
    • CreateSession
    • ValidateSession
    • DeleteSession
Хранение: Redis с TTL
• Отправка логов в единый сервис логирования в формате JSON
Технологии: gRPC, Redis, Kafka-Producer
/////////////////////////////////////////////////////////////////////////
4. Kafka_Service
Управляет за единый сбор логов со всех сервисов.
Технологии: Kafka-Consumer, Zap-Logger, os
/////////////////////////////////////////////////////////////////////////
Общие характеристики:
    • Конфигурация: config.yml (Viper)
    • Логирование: стандартная библиотека/Zap
    • Модульность: разделение на пакеты
    • Обработка ошибок и разделение их на клиентские и серверные
Особенности реализации:
    • Retry-логика для внешних вызовов
    • Timeout handling
    • Graceful shutdown во всех сервисах
