// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth": {
            "post": {
                "description": "Authenticate a user by sending credentials to the target service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Authenticate a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID for authorization",
                        "name": "Cookie",
                        "in": "header"
                    },
                    {
                        "description": "User credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/response.PersonAuth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successful",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/api/del": {
            "delete": {
                "description": "Delete a user by sending a DELETE request with session and user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID for authorization",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/response.PersonDelete"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    },
                    "401": {
                        "description": "Unathorized",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/api/reg": {
            "post": {
                "description": "Register a new user by sending user data to the target service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID for authorization",
                        "name": "Cookie",
                        "in": "header"
                    },
                    {
                        "description": "User registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/response.PersonReg"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully registered",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "response.HTTPResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.PersonAuth": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "response.PersonDelete": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "response.PersonReg": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8083",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "API-Gateway",
	Description:      "This is a sample server for managing users and sessions.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
