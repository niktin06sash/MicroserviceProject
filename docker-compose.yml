networks:
  frontend_net:
  backend_net:
  data_net:
services:
    zookeeper:
      networks:
        - backend_net 
      image: confluentinc/cp-zookeeper:7.0.0
      container_name: zookeeper
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
      volumes:
        - zookeeper_data:/var/lib/zookeeper/data
        - zookeeper_log:/var/lib/zookeeper/log
      ports:
        - "2181:2181"
    
    kafka:
      networks:
        - backend_net 
      image: confluentinc/cp-kafka:7.0.0
      container_name: kafka
      depends_on:
        - zookeeper
      volumes:
        - kafka_data:/var/lib/kafka/data
      environment:
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        KAFKA_CREATE_TOPICS: >
          api-info-log-topic:1:1,
          api-warn-log-topic:1:1,
          api-error-log-topic:1:1,
          user-info-log-topic:1:1,
          user-warn-log-topic:1:1,
          user-error-log-topic:1:1,
          session-info-log-topic:1:1,
          session-warn-log-topic:1:1,
          session-error-log-topic:1:1,
          photo-info-log-topic:1:1,
          photo-warn-log-topic:1:1,
          photo-error-log-topic:1:1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
        KAFKA_LOG_RETENTION_HOURS: 168 
        KAFKA_LOG_SEGMENT_BYTES: 1073741824
      ports:
        - "9092:9092"
    
    rabbitmq:
      networks:
        - backend_net
      image: rabbitmq:3-management
      container_name: rabbitmq
      hostname: rabbitmq-host
      ports:
        - "5672:5672"
        - "15672:15672"
      restart: always
      environment:
        - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
      volumes:
        - rabbitmq_data:/var/lib/rabbitmq

    sessiondb:
      networks:
        - data_net
      image: redis:7
      container_name: sessiondb
      command: redis-server --port 6379 --save 60 1
      volumes:
      - session_data:/data
      ports:
        - "6379:6379"
    
    profiledb:
      networks:
        - data_net
      image: redis:7
      container_name: profiledb
      command: redis-server --port 6380
      volumes:
      - profile_data:/data
      ports:
        - "6380:6380"
  
    photocache:
      networks:
        - data_net
      image: redis:7
      container_name: photocache
      command: redis-server --port 6381
      volumes:
      - photocache_data:/data
      ports:
        - "6381:6381"
    
    userdb:
      image: postgres:latest
      container_name: userdb
      ports:
        - "5432:5432"
      volumes:
        - userdb_data:/var/lib/postgresql/data
      networks:
        - data_net
      restart: always
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 3
    
    photodb:
      image: postgres:latest
      container_name: photodb
      ports:
        - "5433:5433"
      volumes:
        - photodb_data:/var/lib/postgresql/data
      networks:
        - data_net
      restart: always
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 3

    prometheus:
      networks:
        - backend_net 
      image: prom/prometheus:latest
      container_name: prometheus
      ports:
        - "9090:9090"
      volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml
        - prometheus_data:/prometheus
      depends_on:
        - user_service
        - api_service
    
    session_service:
      networks:
        - backend_net 
        - data_net
      build:
        context: ./SessionManagement_service
        dockerfile: Dockerfile
      container_name: session_service
      environment:
        DOCKER: "TRUE"
        REDIS_HOST: sessiondb
        KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ports:
        - "50052:50052"
      depends_on:
        - sessiondb
        - kafka
    
    user_service:
      networks:
        - backend_net 
        - data_net
      build:
        context: .
        dockerfile: UserManagement_service/Dockerfile
      environment:
        DOCKER: "TRUE"
        DB_HOST: userdb
        REDIS_HOST: profiledb
        KAFKA_BOOTSTRAP_SERVERS: kafka:9092
        SESSION_SERVICE_GRPC_ADDRESS: session_service:50052
      container_name: user_service
      ports:
        - "8082:8082"
      depends_on:
        - userdb
        - kafka
        - session_service
        - profiledb
        - rabbitmq
    
    logs_service:
      networks:
        - backend_net 
      build:
        context: ./Logs_service
        dockerfile: Dockerfile
      environment:
        DOCKER: "TRUE"
        KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      container_name: logs_service
      volumes:
        - logs_data:/root/logs_service/internal/logs 
      depends_on:
        - kafka
    
    photo_service:
      networks:
        - frontend_net
        - backend_net
      build:
        context: .
        dockerfile: Photo_service/Dockerfile
      environment:
        DOCKER: "TRUE"
        KAFKA_BOOTSTRAP_SERVERS: kafka:9092
        DB_HOST: photodb
        RABBITMQ_HOST: rabbitmq
        REDIS_HOST: photocache
      container_name: photo_service
      ports:
        - "50053:50053"
      depends_on:
        - kafka
        - rabbitmq
    
    api_service:
      networks:
        - frontend_net
        - backend_net 
      build:
        context: .
        dockerfile: API_service/Dockerfile
      environment:
        DOCKER: "TRUE"
        SESSION_SERVICE_GRPC_ADDRESS: session_service:50052
        PHOTO_SERVICE_GRPC_ADDRESS: photo_service:50053
        KAFKA_BOOTSTRAP_SERVERS: kafka:9092
        USER_SERVICE_HOST: user_service:8082
      container_name: api_service
      ports:
        - "8083:8083"
      depends_on:
        - kafka
volumes:
    zookeeper_log:
    zookeeper_data:
    kafka_data:
    rabbitmq_data:
    userdb_data:
    photodb_data:
    prometheus_data:
    session_data:
    profile_data:
    logs_data:
    photocache_data: